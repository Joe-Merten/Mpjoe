<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>de.jme</groupId>
        <artifactId>Mpjoe-Common</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../Common/pom.xml</relativePath>
    </parent>


    <artifactId>Mpjoe-Swing</artifactId>
    <name>Mpjoe Swing</name>

    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-integration</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.media</groupId>
            <artifactId>jmf</artifactId>
        </dependency>
        <dependency>
            <groupId>uk.co.caprica</groupId>
            <artifactId>vlcj</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!-- Ant-Skript zum Generieren unseres eigenen Versionsstrings, siehe auch VersionInfo.java -->
            <!-- Hmm, alternativ konnte man z.B. auch exec-maven-plugin oder bash-maven-plugin verwenden -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>Invoke Version</id>
                        <phase>generate-sources</phase>
                        <goals><goal>run</goal></goals>
                        <configuration>
                            <target>
                                <!-- Wir tun unser Properties-File nach target/classes, dann wird es automatisch mit in's jar getan -->
                                <mkdir dir="${project.build.directory}/classes" />
                                <exec executable="bash" dir="." outputproperty="myversion" failonerror="true"> <arg line="-C InvokeVersion.sh --make-version-string"/> </exec>
                                <propertyfile file="${project.build.directory}/classes/de.jme.mpjoe.swing.Mpjoe.buildinfo.properties"> <entry key="build.version" value="${myversion}"/> </propertyfile>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Jar ausführbar machen, falls man das Jar ohne Dependencies verwendet, siehe http://maven.apache.org/shared/maven-archiver/examples/classpath.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>de.jme.mpjoe.swing.Mpjoe</mainClass>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>.</Class-Path><!-- Classpath benötigt man leider, damit log4j2.xml ausserhalb des Jars gefunden wird -->
                            <!-- <Implementation-Version>${myversion}</Implementation-Version> ... geht leider noch nicht, siehe VersionInfo.java -->
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <!-- Jar ausführbar machen und Libs mit einpacken, siehe http://stackoverflow.com/questions/17674784/maven-plugin-to-create-executable-jar-with-dependencies-not-unpacked-jar-with-j -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions> <!-- Default assembly:single, damit das nicht jedesmal auf der Kommandozeile übergeben werden muss -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration><!-- Für jar-with-dependencies die Main-Klasse angeben, damit das Jar ausführbar wird -->
                    <archive>
                        <manifest>
                          <addClasspath>true</addClasspath>
                          <mainClass>de.jme.mpjoe.swing.Mpjoe</mainClass>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>.</Class-Path><!-- Classpath benötigt man leider, damit log4j2.xml ausserhalb des Jars gefunden wird -->
                            <!-- <Implementation-Version>${myversion}</Implementation-Version> ... geht leider noch nicht, siehe VersionInfo.java -->
                        </manifestEntries>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>

        </plugins>

        <resources>
            <resource> <!-- Logger-Konfiguration in's Ausgabeverzeichnis kopieren -->
                <directory>src/main/resources/de/jme/mpj</directory>
                <includes> <include>log4j2.xml</include> </includes>
                <targetPath>..</targetPath> <!-- relative to target/classes i.e. ${project.build.outputDirectory} -->
            </resource>
            <resource>
                <!-- Buttons etc. sollen in's Jar -->
                <!-- obiges log4j2.xml haben wir hierdurch zus. auch noch mal im .jar (auf Reserve), was vielleicht gar nicht mal so schlecht ist (TODO: via App automatisch anlegen falls nicht vorhanden) -->
                <directory>src/main/resources/de/jme/mpj</directory>
                <targetPath>de/jme/mpj</targetPath> <!-- relative to target/classes i.e. ${project.build.outputDirectory} -->
            </resource>
            <resource>
                <directory>src/main/resources/de/jme/mpjoe</directory> <!-- Hilfe etc. soll in's Jar -->
                <targetPath>de/jme/mpjoe</targetPath> <!-- relative to target/classes i.e. ${project.build.outputDirectory} -->
            </resource>
        </resources>
    </build>

</project>
